name: Update Blog from PMPP_Notes

on:
  push:
    branches: [ "main" ]  # Adjust if needed

jobs:
  update-blog:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the PMPP_Notes repository (this repo)
      - name: Check out PMPP_Notes
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. Configure Git identity for commits
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # 3. Check out your blog repository into a subfolder called "blog"
      - name: Check out Blog Repo
        uses: actions/checkout@v3
        with:
          repository: mandliya/mandliya.github.io
          path: blog
          token: ${{ secrets.BLOG_TOKEN }}
          # If your blog uses a branch like gh-pages, uncomment the following:
          # ref: gh-pages

      # 4. Sync PMPP_Notes content into blog/_posts/Chapters/ (preserving folder structure)
      #    so only new chapters are added here.
      - name: Sync PMPP_Notes to _posts/Chapters
        run: |
          sudo apt-get update
          sudo apt-get install -y rsync
          mkdir -p blog/_posts/Chapters
          rsync -av --delete \
            --exclude '.git' \
            --exclude '.github' \
            --exclude '.vscode' \
            --exclude '.gitignore' \
            --exclude 'update_blog.yml' \
            ./ blog/_posts/Chapters/

      # 5. Inject default front matter ONLY into new (untracked) .md files under _posts/Chapters
      - name: Ensure front matter on new files only
        run: |
          cd blog
          find _posts/Chapters -type f -name "*.md" | while read FILE; do
            # Skip if this file is already tracked (existing/published)
            if ! git ls-files --error-unmatch "$FILE" > /dev/null 2>&1; then
              # If file does not start with '---', inject default front matter
              if ! head -n 1 "$FILE" | grep -q '^---'; then
                echo "Injecting default front matter into new file: $FILE"
                TEMP_FILE=$(mktemp)
                echo '---' > "$TEMP_FILE"
                echo "title: \"$(basename "$FILE" .md)\"" >> "$TEMP_FILE"
                echo "date: \"$(date +'%Y-%m-%d %H:%M:%S %z')\"" >> "$TEMP_FILE"
                echo "categories: [PMPP_Notes]" >> "$TEMP_FILE"
                echo "tags: [CUDA, HPC]" >> "$TEMP_FILE"
                echo "description: \"Auto-generated front matter for $(basename "$FILE")\"" >> "$TEMP_FILE"
                echo "math: true" >> "$TEMP_FILE"
                echo "mermaid: true" >> "$TEMP_FILE"
                echo "pin: false" >> "$TEMP_FILE"
                echo '---' >> "$TEMP_FILE"
                cat "$FILE" >> "$TEMP_FILE"
                mv "$TEMP_FILE" "$FILE"
              fi
            else
              echo "Skipping existing file: $FILE"
            fi
          done

      # 6. Rename only NEW (untracked) files in _posts/Chapters to YYYY-MM-DD-some-slug.md
      - name: Rename new files to match Jekyll pattern
        run: |
          cd blog
          find _posts/Chapters -type f -name "*.md" | while read FILE; do
            # Skip if already tracked
            if ! git ls-files --error-unmatch "$FILE" > /dev/null 2>&1; then
              # Extract YYYY-MM-DD from front matter (handles optional quotes)
              DATE_LINE=$(grep '^date:' "$FILE" | sed -E 's/^date:\s*"?([0-9]{4}-[0-9]{2}-[0-9]{2}).*/\1/')
              if [ -z "$DATE_LINE" ]; then
                DATE_LINE=$(date +'%Y-%m-%d')
              fi

              # Extract title from front matter (handles optional quotes)
              TITLE_LINE=$(grep '^title:' "$FILE" | sed -E 's/^title:\s*"?(.*)"?/\1/')
              if [ -z "$TITLE_LINE" ]; then
                TITLE_LINE=$(basename "$FILE" .md)
              fi

              # Create a slug: lowercase, replace non-alphanumerics with '-'
              SLUG=$(echo "$TITLE_LINE" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]\+/-/g')
              SLUG=$(echo "$SLUG" | sed 's/^-//; s/-$//')

              NEWNAME="${DATE_LINE}-${SLUG}.md"
              DIRNAME=$(dirname "$FILE")
              NEWPATH="$DIRNAME/$NEWNAME"

              if [ "$FILE" != "$NEWPATH" ]; then
                echo "Renaming new file $FILE -> $NEWPATH"
                mv "$FILE" "$NEWPATH"
              fi
            fi
          done

      # 7. Debug step to see what Git sees after all changes
      - name: Debug Git status
        working-directory: blog
        run: |
          echo "=== GIT STATUS ==="
          git status
          echo "=== UNTRACKED FILES ==="
          git ls-files --others --exclude-standard
          echo "=== GIT DIFF (stat) ==="
          git diff --stat

      # 8. Commit and push changes to the blog repository
      - name: Commit and Push
        working-directory: blog
        run: |
          git add .
          # If there are no changes, commit will fail, so handle gracefully
          git diff --quiet && echo "No changes to commit" || git commit -m "Auto-update blog from PMPP_Notes on $(date +'%Y-%m-%d %H:%M:%S')"
          git push
          echo "Blog updated!"
